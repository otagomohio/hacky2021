[
{
	"uri": "http://example.org/",
	"title": "Hacky Hour 2021",
	"tags": [],
	"description": "",
	"content": "Hacky Hour 2021 This is a resource for getting help on data analysis. This site will serve as the main base for the Hacky Hour 2021 help session, held monthly during the semester at the University of Otago Anatomy Department tearoom. Check here for announcements of new sessions, information from past sessions, and suggest new topics.\n"
},
{
	"uri": "http://example.org/basics/transferring_files/",
	"title": "Transferring Files",
	"tags": [],
	"description": "",
	"content": "Following are some example commands for transferring files and folders to and from the server.\nRemember:\n  You must have permissions to access the target folder on the server to which you wish to move your file\n  Your terminal must be on your computer to move files (that is, your pwd should be somewhere on your own computer)\n  Transfer files from your own computer to the server scp /path/to/file/FILENAME mahuika:/path/to/target/folder grep -c \u0026#39;\u0026gt;\u0026#39; FILENAME (Note the colon \u0026lsquo;:\u0026rsquo; after the server name.)\nIf your terminal is in the folder containing the file, you do not need the path:\nscp FILENAME mahuika:/path/to/target/folder Likewise, if you are transferring the file to your home folder on NeSI, then you do not need the path (although remember that your NeSI home folder does not have much space):\nfor i in team: print(i) scp FILENAME mahuika: Transferring to a subfolder in your home folder on NeSI:\nlibrary(tidyverse) a \u0026lt;- read.table(\u0026#39;tablename\u0026#39;) scp FILENAME mahuika:scripts/ If the folder is in another part of NeSI, then you need to put the full path:\nscp FILENAME mahuika:/nesi/project/uooXXXX/example_project/example_subfolder/ If you want to upload an entire folder (make sure you want to move all the files), just add the -r argument:\nscp -r /path/to/FOLDERNAME mahuika:/path/to/target/folder Note that this will create a folder called FOLDERNAME within the target folder.\nTransfer files from the server to your own computer In order to move files from NeSI or another server to your own computer, the order of paths is reversed:\nscp mahuika:/path/to/file/FILENAME /path/to/target/folder/ Note if your terminal is in the target folder (pwd), then you can just add a period at the end:\nscp mahuika:/path/to/file/FILENAME . The same rules apply for absolute paths. For example, if you are moving a file from your home folder on NeSI:\nscp mahuika:FILENAME /path/to/target/folder/ You can also substitute the ~ (tilde) for the root path on your computer (e.g. ~/ instead of /Users/hughcross/)\nAnd the same rules apply for downloading folders:\nscp -r mahuika:/nesi/project/uooXXXX/example_project/example_subfolder/ /path/to/target/folder rsync: A better way? You can also use the command line tool rsync to move files to and from the server. It has many uses, such as making regular backups to an external hard drive. rsync has some advantages over using scp, for example, you can update a folder you have already copied to the server, and it will only update the files that have changed (if it is a big folder, this can save lots of time). As well, if the transfer is interrupted, rsync will pick up where it left off. For purposes of archiving, when using rsync, the timestamp of your original files will be preserved, whereas with scp the date of the copied files will be the current one. This can be useful when backing up and preserving the original dates of your files.\nFor a single file\nrsync FILENAME mahuika:/path/to/target/folder It is better to use the -a option, as that will preserve time stamp and permissions, etc. Here I have also added the -v option (\u0026ndash;verbose) which will output the status:\nrsync -av FILENAME mahuika:/path/to/target/folder For syncing folders it is the same command:\nrsync -av /path/to/folder mahuika:/path/to/target/folder And, the same thing transferring from the server to your computer:\nrsync -av mahuika:/path/to/folder ~/Documents If you add the --delete option, any files on the target that are not on the source folder will be deleted. To avoid accidentally deleting any precious files, it is advised to use the --dry-run command first, which will show you what would happen without actually doing anything:\nrsync -av /path/to/source/folder --dry-run --delete scripts mahuika:/path/to/target/folder Once you have checked it will do what you want, you can run without the dry-run option\nrsync -av /path/to/source/folder --delete scripts mahuika:/path/to/target/folder As mentioned, you can do this to back up to an external hard drive:\nrsync -av /path/to/source/folder /Volumes/NAME_OF_EXTERNAL_HD/target/folder "
},
{
	"uri": "http://example.org/basics/",
	"title": "Basics",
	"tags": [],
	"description": "",
	"content": "Basics terminal command knowhow \u0026ldquo;The journey of a thousand miles begins with a single step\u0026rdquo;\n-Lao Tzu\n"
},
{
	"uri": "http://example.org/nesi/",
	"title": "NeSI",
	"tags": [],
	"description": "",
	"content": "NeSI Using the NeSI server \u0026ldquo;That is the exploration that awaits you! Not mapping stars and studying nebula,\nbut charting the unknown possibilities of existence.\u0026rdquo;\n-Leonard Nimoy\n"
},
{
	"uri": "http://example.org/bugs/",
	"title": "Bugs",
	"tags": [],
	"description": "",
	"content": "Bugs How to find and solve common problems \u0026ldquo;Give a man a fish and feed him for a day. Don\u0026rsquo;t teach a man to fish\u0026hellip;\nand feed yourself. He\u0026rsquo;s a grown man. And fishing\u0026rsquo;s not that hard\u0026rdquo;\n-Ron Swanson\n"
},
{
	"uri": "http://example.org/basics/tmux_basics/",
	"title": "Tmux basics",
	"tags": [],
	"description": "",
	"content": "tmux, or \u0026lsquo;Terminal Multiplexer\u0026rsquo;, is a very useful tool for using the command line. It has many, many tools, but the most important feature for starting out is that you can use it to run programs in the background while you are logged off. That is, you can start a long job, then log out of the server and go home, and tmux will keep the job running. Most of you are familiar with the program screen to accomplish this, but tmux is much more powerful. Below are a few commands to get you started. Once you are used to using it you can begin to explore more options. In the future we will try to keep this page updated with additional tips and tricks, but for now, here is one (of many) cheat sheets available online:\ntmuxcheatsheet.com\nStarting and detaching from a session New Session To start an unnamed session, you can just enter the name of the program at the prompt:\ntmux I suggest you give a session a name when you start it, which will make it easier to keep track once you have multiple sessions going:\ntmux new -s name_of_session Detach from a Session To \u0026lsquo;detach\u0026rsquo; or leave a session, you hold down the Control key and the \u0026lsquo;b\u0026rsquo; keys at the same time, release, then press the \u0026rsquo;d' key:\n\u0026lsquo;\u0026lsquo;\u0026lsquo;bash Ctrl-b d '\u0026rsquo;\u0026rsquo;\nNote that the Control and b key action is referred to as a \u0026lsquo;prefix\u0026rsquo; or \u0026lsquo;chord\u0026rsquo;, depending on the tmux guide. This action can be represented differently in different places. For example, on the link above, it is listed as \u0026ldquo;Ctrl + b d. The prefix starts a lot of actions in tmux, but once you are used to it you will find it is easy.\nGo back to existing session If you have started a big job in tmux, and wish to re-enter it, or \u0026lsquo;attach\u0026rsquo;, it is:\ntmux attach or\ntmux a This will go back to the last session. If you have named your session, you can specify this:\ntmux a -t name_of_session Listing active sessions You can list all your tmux sessions, even if you haven\u0026rsquo;t named them:\ntmux ls Note naming your sessions will make it easier to know which you have. If you haven\u0026rsquo;t named them, then they will be numbered. The names (or numbers) of sessions will be the first item when you list them\nDeleting active sessions If you are finished with the job, and no longer need the session, then you can delete, or \u0026lsquo;kill\u0026rsquo; it:\ntmux kill-session -t name_of_session If you do not specify a name of a session (no -t argument), then tmux will kill the last session made.\n"
},
{
	"uri": "http://example.org/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://example.org/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]